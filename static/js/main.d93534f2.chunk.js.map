{"version":3,"sources":["aishiteruedited2x.png","App.js","reportWebVitals.js","index.js"],"names":["Box1","position","args","color","mesh1","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","mesh","onClick","castShadow","ref","attach","MeshWobbleMaterial","speed","factor","Image1","texture1","useLoader","THREE","img","mesh2","alphaTest","opacity","transparency","map","softShadows","App","shadowMap","colorManagement","camera","fov","intensity","shadow-mapSize-height","shadow-mapSize-width","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-bottom","shadow-camera-top","fallback","receiveShadow","Math","PI","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAAe,MAA0B,8CCazC,SAASA,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACxBC,EAAQC,iBAAO,MACrBC,aAAS,WAAQF,EAAMG,QAAQC,SAASC,EAAIL,EAAMG,QAAQC,SAASE,GAAK,OAFjC,MAIXC,oBAAS,GAJE,mBAIhCC,EAJgC,KAIxBC,EAJwB,KAKjCC,EAAQC,YAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAG3C,OACE,eAAC,IAAEK,KAAH,CAAQC,QAAS,kBAAML,GAAWD,IAASI,MAAOF,EAAME,MAAOG,YAAU,EAAClB,SAAUA,EAAUmB,IAAKhB,EAAnG,UACE,mCAAmBiB,OAAO,WAAWnB,KAAMA,IAC3C,cAACoB,EAAA,EAAD,CAAoBD,OAAO,WAAWlB,MAAOA,EAAOoB,MAAO,EAAGC,OAAQ,QAK5E,SAASC,IACP,IAAMC,EAAWC,YAAUC,gBAAqBC,GAC1CC,EAAQzB,iBAAO,MAGrB,OAFAC,aAAS,WAAQwB,EAAMvB,QAAQC,SAASC,EAAIqB,EAAMvB,QAAQC,SAASE,GAAK,QAGtE,eAAC,IAAEO,KAAH,CAAQhB,SAAU,EAAE,EAAG,EAAG,IAAKkB,YAAU,EAACC,IAAKU,EAA/C,UACE,qCAAqBT,OAAO,WAAWnB,KAAM,CAAC,GAAI,MAClD,mCAAmB6B,UAAW,GAAKC,QAAS,EAAGC,cAAc,EAAMC,IAAKR,EAAUL,OAAO,gBA3B/Fc,cAgFeC,MAhDf,WAEE,OACE,mCACE,eAAC,IAAD,CAAQC,WAAS,EAACC,iBAAe,EAACC,OAAQ,CAAEtC,SAAU,CAAC,EAAG,EAAG,IAAKuC,IAAK,IAAvE,UACE,8BAAcC,UAAW,KACzB,4BAAYxC,SAAU,EAAE,GAAI,EAAG,IAAKwC,UAAW,KAC/C,4BAAYxC,SAAU,CAAC,IAAI,EAAG,IAAKwC,UAAW,IAC9C,kCACEtB,YAAU,EACVlB,SAAU,CAAC,EAAG,GAAI,GAClBwC,UAAW,IACXC,wBAAuB,IACvBC,uBAAsB,IACtBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,wBAAuB,GACvBC,oBAAmB,KAGrB,kCACE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAACxB,EAAD,MAEF,uBAAMyB,eAAa,EAAC1C,SAAU,EAAE2C,KAAKC,GAAK,EAAG,EAAG,GAAInD,SAAU,CAAC,GAAI,EAAG,GAAtE,UACE,qCAAqBoB,OAAO,WAAWnB,KAAM,CAAC,IAAK,OACnD,gCAAgBmB,OAAO,WAAWlB,MAAM,mBAK1C,cAACH,EAAD,CAAMC,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,CAAC,EAAG,EAAG,GAAIC,MAAM,cAClD,cAACH,EAAD,CAAMC,SAAU,CAAC,EAAG,EAAG,GAAIE,MAAM,SACjC,cAACH,EAAD,CAAMC,SAAU,EAAE,GAAI,GAAI,GAAIE,MAAM,eAEpC,cAACkD,EAAA,EAAD,aCnEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d93534f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/aishiteruedited2x.85a6d5e2.png\";","import React, { useRef, useState, Suspense } from \"react\";\nimport './App.scss';\nimport * as THREE from 'three'\nimport { Canvas, useFrame, useLoader } from \"react-three-fiber\";\n\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from \"drei\";\n//import {Box} from \"drei\";\nimport { useSpring, a } from \"react-spring/three\";\n//import { TextureLoader } from \"three/src/loaders/TextureLoader.js\";\nimport img from './aishiteruedited2x.png';\n\nsoftShadows();\n\nfunction Box1({ position, args, color }) {\n  const mesh1 = useRef(null);\n  useFrame(() => { mesh1.current.rotation.x = mesh1.current.rotation.y += 0.01 });\n\n  const [expand, setExpand] = useState(false);\n  const props = useSpring({\n    scale: expand ? [1.4, 1.5, 1.4] : [1, 1, 1],\n  });\n\n  return (\n    <a.mesh onClick={() => setExpand(!expand)} scale={props.scale} castShadow position={position} ref={mesh1}>\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial attach='material' color={color} speed={4} factor={0.4} />\n    </a.mesh>\n  )\n}\n\nfunction Image1() {\n  const texture1 = useLoader(THREE.TextureLoader, img);\n  const mesh2 = useRef(null);\n  useFrame(() => { mesh2.current.rotation.x = mesh2.current.rotation.y += 0.005 });\n\n  return (\n    <a.mesh position={[-8, 0, 10]} castShadow ref={mesh2}>\n      <planeBufferGeometry attach='geometry' args={[10, 10]} />\n      <meshPhongMaterial alphaTest={0.5} opacity={1} transparency={true} map={texture1} attach='material' />\n    </a.mesh>\n  )\n}\n\nfunction App() {\n\n  return (\n    <>\n      <Canvas shadowMap colorManagement camera={{ position: [5, 2, 20], fov: 70 }}>\n        <ambientLight intensity={0.4} />\n        <pointLight position={[-20, 0, 10]} intensity={0.7} />\n        <pointLight position={[20,-4, 50]} intensity={1}/>\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.2}\n          shadow-mapSize-height={512}\n          shadow-mapSize-width={512}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-bottom={-10}\n          shadow-camera-top={10}\n\n        />\n        <group>\n          <Suspense fallback={null}>\n            <Image1 />\n          </Suspense>\n          <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -7, 0]}>\n            <planeBufferGeometry attach='geometry' args={[100, 100]} />\n            <shadowMaterial attach='material' color='lightyellow' />\n          </mesh>\n          \n          \n\n          <Box1 position={[0, 1, 2]} args={[3, 2, 5]} color='lightblue' />\n          <Box1 position={[5, 3, 3]} color='pink' />\n          <Box1 position={[-6, -4, -5]} color='lightgreen' />\n\n          <OrbitControls></OrbitControls>\n        </group>\n        \n\n\n\n\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}